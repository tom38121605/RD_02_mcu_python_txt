
 

==========================初始化之外的其他寄存器=================================

reg00：   又名 FIFO2，分为写入寄存器和读取寄存器
      w：  COMMAND   详见第15页
      r：   详见第16页


==========================sensor==init=================================


I2C_Write_v2(I2C_Addr,0x01,0x01)    // reg01.0 =1,  soft reset
I2C_Write_v2(I2C_Addr,0x20,0x95)    //reg20.7=1, reg20.6-5=00, reg20.4-2=101, reg20.0=1, 使能vref, 设pga power 为0.4x, 设pga gain为 64x，使能pga

I2C_Write_v2(I2C_Addr,0x23,0x01)    //reg23.7=0, reg23.0=1, 设vref为2.5v，工厂内部控制 

I2C_Write_v2(I2C_Addr,0x2a,0x87)    //reg2a.6=1, reg2a.5-3=000, reg2a.2=1, reg2a.1=1, reg2a.0=1,  
                                                     使能vref从sleep到save模式, 设置分频为10(或已理解，与后面的bit2结合看)，设分频倍数为1，设scl上拉，设sda上拉

I2C_Write_v2(I2C_Addr,0x24,0xff)     //reg24.7-4=1111, reg24.3-0=1111, 设置y输出电流为3.1mA, 设置x输出电流为3.1mA
I2C_Write_v2(I2C_Addr,0x25,0x0f)    //reg25.3-0=1111, 设置z输出电流为3.1mA

I2C_Write_v2(I2C_Addr,0x26,0x01)     //reg26.3-0=0001, adc转换周期高4位 = 0001    (OSR)
I2C_Write_v2(I2C_Addr,0x27,0x00)     //reg27.7-0=0000 0000, adc转换周期低8位 = 0000 0000   (1--4096)  或4095  （OSR）

I2C_Write_v2(I2C_Addr,0x28,0x28)    //reg28.6-0 = 28H, 转换时间cycle  (1-127)   (INIT)

I2C_Write_v2(I2C_Addr,0x29,0x20)    //reg29.5-0 = 20H，设置时间周期补偿  （1-63）     
I2C_Write_v2(I2C_Addr,0x1e,0x0)     //reg1e =0， 设置efuses  （待理解）



==========================write==xyz=================================

libtest = ctypes.CDLL(Dir_USB2UARTSPIIICDLL)

I2C_Write_v2(I2C_Addr,0x20,0x81) 



参数： I2C_Addr,0x20,0x81
def I2C_Write_v2(static_addr,*data):

    temp=[]

    for datum in data:
        temp.append(datum)
    SendBuffer=bytes(temp)

    libtest.IICDirectSend(0,static_addr,SendBuffer,len(SendBuffer),0);   //去掉前后两个0，就很好理解了



==========================read==xyz=================================


FIFO=I2C_Read_v2(I2C_Addr,Sample_count*3)


def I2C_Read_v2 (static_addr,length):
    Buffer=bytes(length)
    Result = libtest.IICDirectRead(0,static_addr,Buffer,length,0);
    debug("I2C Read ",''.join('{:02x} '.format(a) for a in Buffer))
    return Buffer







============================ 参考 =================================

#    for commandx in (
0b0000_0001,     //0x01  ，1， T1
0b0100_0001,      //0x 41  ，1， T1
0b1000_0001,      //0x81  ，1， T1   (默认temp)
0b1100_0001,       //0xC1  ，2， T1，T2

0b0000_0010,       //0x02  ，3， X1    ,Y1    ,Z1
0b0100_0010,      //0x42  ，3， X1    ,Y1    ,Z1
0b1000_0010,      //0x82  ，3， X1    ,Y1    ,Z1
0b1100_0010,      //0xC2  ，6， X1    ,Y1    ,Z1， X2    ,Y2    ,Z2

0b0000_0011,      //0x03  ，4， X1    ,Y1    ,Z1，T1
0b0100_0011,     //0x43  ，4， X1    ,Y1    ,Z1，T1
0b1000_0011,      //0x83  ，4， X1    ,Y1    ,Z1，T1

0b1100_0011,      //0xC3  ，8， X1    ,Y1    ,Z1，T1， X2    ,Y2    ,Z2，T2
0b1110_0011,      //0xE3  ，8， X1    ,Y1    ,Z1，T1， X2    ,Y2    ,Z2，T2

0b0110_0001,    //0x61  ，1， T1

0b0110_0010,      //0x62  ，3， X1    ,Y1    ,Z1
0b1010_0010,     //0xA2  ，3， X1    ,Y1    ,Z1

0b1000_0000,    //0x80  ，0
0b0110_0000     //0xC0  ，0

):
#



================ 参考2 ==== 计算24位adc的公式 ==============

val = Vin / (3 * Vref) * ( A - B) * PGA_Gain

A = (OSR-1) * (OSR-2) * (OSR-3) 
B = (INIT-1) * (INIT-2) * (INIT-3) 

Vin =  差分输入电压                    （0.5V）
Vref = reg23.7  0--2.5v, 1--1.2v   （2.5v）
OSR = reg26.3-0+reg27.7-0      （256）
INIT = reg28.6-0                      （32）
PGA_Gain = reg20.4-2                ( 4 )






